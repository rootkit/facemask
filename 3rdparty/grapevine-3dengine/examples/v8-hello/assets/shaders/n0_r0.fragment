// PRECISION
precision highp int;
precision highp float;

// IN from vertex shader
varying vec3 nNormal;
varying vec2 TextureCoord;
varying float OmniLightFactor;  // <- NEW

// IN from textures
uniform highp sampler2D ColorMap;

// IN from renderer
uniform float Highlight;
uniform float Opacity;
uniform float SpecularFactor;
uniform float SpecularGlossiness;

// Lights
uniform highp vec3 nDiffuseLight;
uniform highp vec3 nSpecularLight;
uniform highp vec3 LightColorAmbient;
uniform highp vec3 LightColorDiffuse;
uniform highp vec3 LightColorSpecular;
uniform highp vec3 OmniLightColor;  // <- NEW

// Constants
const float pi = 3.14159;

void main (void)
{
    // Samples at start of the shader to get the memory bus working while we do some calculations :)
    vec4 colorSample = texture2D(ColorMap, TextureCoord);

    // Reflection for specular lightning
    vec3 nReflect = normalize(-reflect(nSpecularLight, nNormal));

    // Diffuse
    // Cosine angle between normal and light (both normalized so can be calculated like next)
    float cosineDiffuse = dot(nNormal, nDiffuseLight);
    float Diffuse = (pi - clamp(acos(cosineDiffuse), 0.0, pi)) / pi;

    // Specular
    // Cosine angle between normal and reflection (both normalized so can be calculated like next)
    float cosineSpecular = dot(nReflect, nNormal);
    float Specular = ((pi - clamp(acos(cosineSpecular), 0.0, pi))) / pi;
    Specular = SpecularFactor * pow(Specular, SpecularGlossiness);

    // Color - ambient (0.5, 0.5, 0.5) + diffuse 0.5 (white light) + specular 0.5 (white light)
    vec3 sample = 0.5 * colorSample.rgb;
    vec3 color = (LightColorAmbient * sample) + (LightColorDiffuse * Diffuse * sample) + (LightColorSpecular * Specular * vec3(0.5, 0.5, 0.5));

    // Color - omni
    color = color + OmniLightFactor * OmniLightColor;

    // Color - glow
    vec3 fat = vec3(1.0, 1.0, 1.0) - color;
    color = color + Highlight * fat;

    // Color clamp
    gl_FragColor = clamp(vec4(color, Opacity * colorSample.a), vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0));
}
